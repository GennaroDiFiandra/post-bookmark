{"version":3,"sources":["bookmark-me-button.js","bookmarked-posts-list.js"],"names":["document","addEventListener","button","querySelector","BookmarkMeButtonHandler","handleEvent","async","event","preventDefault","initialData","getGlobalData","preparedData","preparePostRequestData","result","await","doPostRequest","hideBookmarkMeButton","showBookmarkedPostsButton","ajaxUrl","nonce","BookmarkMeButtonData","postId","target","dataset","postid","userId","userid","url","URL","searchParams","set","payload","search","headers","Headers","Content-Type","options","method","credentials","body","JSON","stringify","let","output","response","fetch","ok","status","error","console","style","display","classList","contains","add","list","BookmarkedPostsListHandler","updatePostsList","BookmarkedPostsListData","clicked","children","closest","remove"],"mappings":"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","file":"generated-scripts.js","sourcesContent":["\"use strict\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const button = document.querySelector(\".bookmark-me-button\");\n  if (!button) return;\n\n  button.addEventListener(\"click\", BookmarkMeButtonHandler);\n});\n\nconst BookmarkMeButtonHandler = {\n\n  handleEvent: async function(event)\n  {\n    event.preventDefault();\n\n    const initialData = BookmarkMeButtonHandler.getGlobalData(event);\n    const preparedData = BookmarkMeButtonHandler.preparePostRequestData(initialData);\n    const result = await BookmarkMeButtonHandler.doPostRequest(preparedData);\n\n    result && BookmarkMeButtonHandler.hideBookmarkMeButton(event);\n    result && BookmarkMeButtonHandler.showBookmarkedPostsButton();\n  },\n\n  getGlobalData: function(event)\n  {\n    // BookmarkMeButtonData is a global variable\n    const {ajaxUrl, nonce} = BookmarkMeButtonData;\n    const postId = event.target.dataset.postid;\n    const userId = event.target.dataset.userid;\n\n    return { ajaxUrl, nonce, postId, userId }\n  },\n\n  preparePostRequestData: function({ ajaxUrl, nonce, postId, userId })\n  {\n    const url = new URL(ajaxUrl);\n    url.searchParams.set(\"action\", \"bookmark_me_button\");\n    url.searchParams.set(\"nonce\", nonce);\n    url.searchParams.set(\"post_id\", postId);\n    url.searchParams.set(\"user_id\", userId);\n    const payload = url.search;\n    const headers = new Headers({\"Content-Type\": \"application/json\"});\n\n    return { url, headers, payload }\n  },\n\n  doPostRequest: async function({ url, headers, payload })\n  {\n    const options = {\n      method: \"POST\",\n      headers: headers,\n      credentials: \"same-origin\",\n      body: JSON.stringify(payload),\n    };\n\n    let output;\n\n    try\n    {\n      const response = await fetch(url, options);\n      if (!response.ok) throw `Status code ${response.status} - bad response from the server`;\n      output = true;\n    }\n    catch (error)\n    {\n      console.error(error)\n      output = false;\n    }\n\n    return output;\n\n  },\n\n  hideBookmarkMeButton: function(event)\n  {\n    event.target.style.display = \"none\";\n  },\n\n  showBookmarkedPostsButton: function()\n  {\n    const button = document.querySelector(\".bookmarked-posts-button\");\n    if (!button) return;\n\n    if (!button.classList.contains(\"_active\")) button.classList.add(\"_active\");\n  },\n\n};","\"use strict\";\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const list = document.querySelector(\".bookmarked-posts-list\");\n  if (!list) return;\n\n  list.addEventListener(\"click\", BookmarkedPostsListHandler);\n});\n\nconst BookmarkedPostsListHandler = {\n\n  handleEvent: async function(event)\n  {\n    event.preventDefault();\n\n    const initialData = BookmarkedPostsListHandler.getGlobalData(event);\n    const preparedData = BookmarkedPostsListHandler.preparePostRequestData(initialData);\n    const result = await BookmarkedPostsListHandler.doPostRequest(preparedData);\n\n    result && BookmarkedPostsListHandler.updatePostsList(result);\n  },\n\n  getGlobalData: function(event)\n  {\n    // BookmarkedPostsListData is a global variable\n    const {ajaxUrl, nonce} = BookmarkedPostsListData;\n\n    const clicked = event.target;\n    if (clicked.classList.contains(\"bookmarked-posts-item\"))\n    {\n      const postId = clicked.children[0].dataset.postid;\n      const userId = clicked.children[0].dataset.userid;\n      const target = clicked;\n\n      return { ajaxUrl, nonce, postId, userId, target }\n    }\n    else if (clicked.classList.contains(\"bookmarked-posts-item-ref\"))\n    {\n      const postId = clicked.dataset.postid;\n      const userId = clicked.dataset.userid;\n      const target = clicked.closest(\".bookmarked-posts-item\");\n\n      return { ajaxUrl, nonce, postId, userId, target }\n    }\n  },\n\n  preparePostRequestData: function({ ajaxUrl, nonce, postId, userId, target })\n  {\n    const url = new URL(ajaxUrl);\n    url.searchParams.set(\"action\", \"bookmarked_posts_list\");\n    url.searchParams.set(\"nonce\", nonce);\n    url.searchParams.set(\"post_id\", postId);\n    url.searchParams.set(\"user_id\", userId);\n    const payload = url.search;\n    const headers = new Headers({\"Content-Type\": \"application/json\"});\n\n    return { url, headers, payload, target }\n  },\n\n  doPostRequest: async function({ url, headers, payload, target })\n  {\n    const options = {\n      method: \"POST\",\n      headers: headers,\n      credentials: \"same-origin\",\n      body: JSON.stringify(payload),\n    };\n\n    let output;\n\n    try\n    {\n      const response = await fetch(url, options);\n      if (!response.ok) throw `Status code ${response.status} - bad response from the server`;\n      output = target;\n    }\n    catch (error)\n    {\n      console.error(error)\n      output = false;\n    }\n\n    return output;\n\n  },\n\n  updatePostsList: function(target)\n  {\n    target.remove();\n  },\n\n};"]}